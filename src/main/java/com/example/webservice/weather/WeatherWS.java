package com.example.webservice.weather;

import com.example.webservice.mobile.MobileCodeWS;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * <a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>2400多个城市天气预报Web服务</strong>，包含2300个以上中国城市和100个以上国外城市天气预报数据。数据每2.5小时左右自动更新一次，准确可靠。<br />使用本站 WEB 服务请注明或链接本站：<a href="http://www.webxml.com.cn/" target="_blank">http://www.webxml.com.cn/</a> 感谢大家的支持！<br /><br /><img alt="PDF" title="PDF file" src="http://www.webxml.com.cn/images/icon/pdf.gif" style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/WeatherWsHelp.pdf" target="_blank">接口帮助文档</a> &nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP file" src="http://www.webxml.com.cn/images/icon/zip.gif" style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/about_city.zip">部分城市介绍和气候背景</a> &nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP file" src="http://www.webxml.com.cn/images/icon/zip.gif" style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/city_photo.zip">部分城市图片</a> &nbsp;&nbsp;&nbsp; <img alt="HTML" title="HTML file" src="http://www.webxml.com.cn/images/icon/html.gif" style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx" target="_blank">天气现象和图例</a><br />&nbsp;
 *
 * This class was generated by Apache CXF 2.5.11
 * 2022-03-28T16:45:56.516+08:00
 * Generated source version: 2.5.11
 * 
 */
@WebServiceClient(name = "WeatherWS", 
                  wsdlLocation = "http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl",
                  targetNamespace = "http://WebXml.com.cn/")
public class WeatherWS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://WebXml.com.cn/", "WeatherWS");
    public final static QName WeatherWSSoap12 = new QName("http://WebXml.com.cn/", "WeatherWSSoap12");
    public final static QName WeatherWSSoap = new QName("http://WebXml.com.cn/", "WeatherWSSoap");
    public final static QName WeatherWSHttpPost = new QName("http://WebXml.com.cn/", "WeatherWSHttpPost");
    public final static QName WeatherWSHttpGet = new QName("http://WebXml.com.cn/", "WeatherWSHttpGet");

    //本地生成
    //static {
    //    URL url = WeatherWS.class.getResource("http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl");
    //    if (url == null) {
    //        url = WeatherWS.class.getClassLoader().getResource("http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl");
    //    }
    //    if (url == null) {
    //        java.util.logging.Logger.getLogger(WeatherWS.class.getName())
    //            .log(java.util.logging.Level.INFO,
    //                 "Can not initialize the default wsdl from {0}", "http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl");
    //    }
    //    WSDL_LOCATION = url;
    //}


    static {
        URL url = null;
        try {
            url = new URL("http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(MobileCodeWS.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}", "http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WeatherWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WeatherWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WeatherWS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WeatherWS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WeatherWS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WeatherWS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns WeatherWSSoap
     */
    @WebEndpoint(name = "WeatherWSSoap12")
    public com.example.webservice.weather.WeatherWSSoap getWeatherWSSoap12() {
        return super.getPort(WeatherWSSoap12, WeatherWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWSSoap
     */
    @WebEndpoint(name = "WeatherWSSoap12")
    public WeatherWSSoap getWeatherWSSoap12(WebServiceFeature... features) {
        return super.getPort(WeatherWSSoap12, WeatherWSSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherWSSoap
     */
    @WebEndpoint(name = "WeatherWSSoap")
    public WeatherWSSoap getWeatherWSSoap() {
        return super.getPort(WeatherWSSoap, WeatherWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWSSoap
     */
    @WebEndpoint(name = "WeatherWSSoap")
    public WeatherWSSoap getWeatherWSSoap(WebServiceFeature... features) {
        return super.getPort(WeatherWSSoap, WeatherWSSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherWSHttpPost
     */
    @WebEndpoint(name = "WeatherWSHttpPost")
    public com.example.webservice.weather.WeatherWSHttpPost getWeatherWSHttpPost() {
        return super.getPort(WeatherWSHttpPost, WeatherWSHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWSHttpPost
     */
    @WebEndpoint(name = "WeatherWSHttpPost")
    public WeatherWSHttpPost getWeatherWSHttpPost(WebServiceFeature... features) {
        return super.getPort(WeatherWSHttpPost, WeatherWSHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherWSHttpGet
     */
    @WebEndpoint(name = "WeatherWSHttpGet")
    public com.example.webservice.weather.WeatherWSHttpGet getWeatherWSHttpGet() {
        return super.getPort(WeatherWSHttpGet, WeatherWSHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWSHttpGet
     */
    @WebEndpoint(name = "WeatherWSHttpGet")
    public WeatherWSHttpGet getWeatherWSHttpGet(WebServiceFeature... features) {
        return super.getPort(WeatherWSHttpGet, WeatherWSHttpGet.class, features);
    }

}
